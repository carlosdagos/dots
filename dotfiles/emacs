; -*- mode: emacs-lisp -*-

;; Utility functions

(eval-when-compile
  (require 'cl))

(defun curry (func &rest args)
  (lexical-let ((func func)
                (args args))
    (lambda (&rest more)
      (apply func (append args more)))))

(defun curry-i (func &rest args)
  "Interactive version of curry"
  (lexical-let ((func func)
                (args args))
    (lambda (&rest more)
      (interactive)
      (apply func (append args more)))))

(defun rcurry (func &rest args)
  (lexical-let ((func func)
                (args args))
    (lambda (&rest more)
      (apply func (append args more)))))

(defun exec-to-string (cmd)
  (string-trim (shell-command-to-string cmd)))

(defun osx-p ()
  (string-equal system-type "darwin"))

;; Bindings and configurations

(require 'package)
(setq
 ;; My favorite package archives
 package-archives
 '(("gnu"          . "http://elpa.gnu.org/packages/")
   ("org"          . "http://orgmode.org/elpa/")
   ("melpa"        . "http://melpa.org/packages/")
   ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities
 ;; But prefer stable
 '(("melpa-stable" . 1)))

;; Install `use-package`
(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

;; Install a `use-package` extension
(use-package use-package-ensure-system-package
  :ensure t)

;; Install `straight.el`
(progn
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file))

  (straight-use-package 'el-patch))


;; Please use bash for the shell (fish shell works clunky)
(setq explicit-shell-file-name (executable-find "bash"))

;; Also use multi-term
(use-package multi-term
  :ensure t
  :config
  (setq multi-term-program (executable-find "fish")))

;; Set my favorite font
(add-to-list 'default-frame-alist '(font . "Luculent-13"))
(if (string-equal system-type "darwin")
    (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend))

;; Keep .emacs.d clean
(use-package no-littering
  :ensure t
  :config
  (require 'recentf)
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory))

;; Don't use tabs but instead use 2 spaces
(setq-default indent-tabs-mode nil)
(setq tab-width 2)

;; Some fringe space
(setq left-fringe-width 5)

;; Don't make sounds
(setq ring-bell-function 'ignore)

;; Hide the scroolbar, menubar and toolbar
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when window-system
  (tool-bar-mode -1))
(menu-bar-mode -1)

;; Use line numbers when programming
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; Setup my theme
(use-package kaolin-themes
;;  :ensure t
  :config
  (load-theme 'kaolin-dark t)
  (kaolin-treemacs-theme))

(use-package smart-mode-line
  :ensure t
  :init
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'respectful)
  :config
  (sml/setup))

;; Set up which-key
(use-package which-key
  :ensure t
  :config
  (which-key-mode)
  (setq which-key-allow-evil-operators t))

;; Enable evil mode
(use-package evil
  :ensure t
  :after projectile
  :config
  (evil-mode 1)
  ;; I also don't like the default shortcut for indenting a region
  (let ((indent-kbd "\C-i"))
    (evil-global-set-key 'visual indent-kbd 'indent-region)
    (evil-global-set-key 'normal indent-kbd 'indent-region))
  ;; Set up winner mode
  (progn
    (winner-mode)
    (evil-global-set-key 'normal ",b" 'switch-to-buffer)
    (evil-global-set-key 'normal ",k" 'kill-buffer)
    (evil-global-set-key 'normal ",q" 'delete-window)
    (evil-global-set-key 'normal ",p" 'projectile-find-file)
    (evil-global-set-key 'normal ",d" 'split-window-horizontally)
    (evil-global-set-key
     'normal
     ",f"
     (lambda ()
       (interactive)
       ;; If we have more than one window open
       (if (> (length (window-list)) 1)
           ;; Go full screen
           (delete-other-windows)
         ;; Else, undo the fullscreen stuff
         (winner-undo))))))

;; Use highlight-indentation
(use-package highlight-indentation
  :ensure t)

;; Define a function to toggle code folding
(defun toggle-code-fold ()
  "Toggle fold all lines larger than indentation on current line"
  (interactive)
  (let ((col 1))
    (save-excursion
      (back-to-indentation)
      (setq col (+ 1 (current-column)))
      (set-selective-display
       (if selective-display nil (or col 1))))))

;; Use realgud for debugging
(use-package realgud :ensure t :pin melpa-stable)
(progn
  ;;
  ;; Install and require the `realgud-lldb` package
  ;;
  ;; NOTE: TESTING FOR NOW
  (straight-use-package
   '(realgud-lldb :host github :repo "realgud/realgud-lldb"))
  (load "~/.emacs.d/straight/repos/realgud-lldb/realgud-lldb.el"))

;; Use eglot for rls support
(use-package eglot
  :pin melpa
  :ensure t
  :ensure-system-package
  ((rls . "rustup component add rls-preview rust-analysis rust-src"))
  :config
  (lexical-let
      (;; A function that adds a mode-and-prog to eglot
       (eglot-add-to-list
        (lambda (mode-and-prog)
          (add-to-list 'eglot-server-programs mode-and-prog)))
       ;; Set up like this for the nightly compiler. This doesn't always work out great but whatever
       (rls-prog (exec-to-string "rustup which rls")))
    (mapcar
     eglot-add-to-list
     ;; The list of modes and programs
     (list
      `(rust-mode . (eglot-rls ,rls-prog))))))

;; Set up the pretty parens
(use-package paren
  :config
  (show-paren-mode 1)
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-background 'show-paren-match "#def")
  (set-face-attribute  'show-paren-match nil :weight 'extra-bold))

(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

;; Use flycheck
(use-package flycheck
  :ensure t
  :config
  (let ((m-n (kbd "M-n"))
        (m-p (kbd "M-p")))
    (define-key flycheck-mode-map m-n 'flycheck-next-error)
    (define-key flycheck-mode-map m-p 'flycheck-previous-error)))

;; And for flymake I guess too
(use-package flymake
  :ensure t
  :config
  (let ((m-n (kbd "M-n"))
        (m-p (kbd "M-p")))
    (define-key flymake-mode-map m-n 'flymake-goto-next-error)
    (define-key flymake-mode-map m-p 'flymake-goto-prev-error)))

;; Use yaml
(use-package yaml-mode
  :ensure t
  :pin melpa-stable
  :after key-seq
  :config
  (add-hook 'yaml-mode-hook 'flycheck-mode)
  (add-hook 'yaml-mode-hook 'highlight-indentation-mode)
  (add-hook 'yaml-mode-hook 'display-line-numbers-mode)
  (key-seq-define yaml-mode-map "ff" 'toggle-code-fold))

(use-package flycheck-yamllint
  :ensure t
  :defer t
  :after yaml-mode
  :init
  (progn
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))

;; Conifgure `conf-mode`
(use-package conf-mode
  :init
  (eval-after-load 'conf-mode
    '(add-hook 'conf-toml-mode-hook 'display-line-numbers-mode)))

;; Up an 80 column rule
(use-package whitespace
  :config
  (setq whitespace-line-column 78) ;; default line length
  (setq whitespace-style '(face lines-tail)))

;; Enable the git gutter
(use-package git-gutter+
  :ensure t
  :config
  (global-git-gutter+-mode)
  :init
  (progn
    (setq git-gutter+-window-width  2)
    (setq git-gutter+-modified-sign "~ ")
    (setq git-gutter+-added-sign    "+ ")
    (setq git-gutter+-deleted-sign  "- ")))

(use-package evil-goggles
  :ensure t
  :after evil
  :config
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))

;; Setup magit
(use-package magit
  :ensure t
  :after evil
  :pin melpa-stable
  :ensure t
  :config
  ;; Fix evil's default
  (evil-define-key 'normal magit-blame-mode-map "q" 'magit-blame-quit))

;; Set up paredit
(use-package paredit
  :ensure t
  :after evil
  :demand
  :config
  (progn
    (mapc (rcurry 'add-hook 'paredit-mode)
          '(emacs-lisp-mode-hook
            common-lisp-mode-hook
            scheme-mode-hook
            lisp-mode-hook)))
  ;; Please wrap sexps when I press w
  (evil-define-key 'insert paredit-mode-map "i" 'paredit-wrap-sexp))


;; Set up parinfer
(use-package parinfer
  :ensure t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             evil           ; If you use Evil.
             paredit        ; Introduce some paredit commands.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank))   ; Yank behavior depend on mode.
    (mapc (rcurry 'add-hook 'parinfer-mode)
          '(emacs-lisp-mode-hook
            common-lisp-mode-hook
            scheme-mode-hook
            lisp-mode-hook))))


(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  (progn
    (setq markdown-command "pandoc -f gfm+footnotes --css ~/.emacs.d/assets/pandoc.css --self-contained --quiet")
    (add-hook 'markdown-mode-hook 'whitespace-mode)
    (add-hook 'markdown-mode-hook 'flyspell-mode)))


;; Set up ensime
(use-package ensime
  :ensure t
  :pin    melpa-stable
  :config
  (setq ensime-startup-notification nil))


(use-package scala-mode
  :ensure t
  :after evil
  :interpreter
  ("scala" . scala-mode)
  :init
  (mapc (curry 'add-hook 'scala-mode-hook)
        '(show-paren-mode
          smartparens-mode
          ensime-mode))
  :config
  ;; Override this keybinding
  (evil-define-key 'normal scala-mode-map "t" 'ensime-type-at-point)
  (evil-define-key 'visual scala-mode-map "t" 'ensime-type-at-point))

(use-package groovy-mode
  :ensure t
  :pin melpa-stable)

(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))

(use-package flx-ido
  :ensure t
  :pin melpa-stable
  :config
  (ido-mode 1)
  (ido-everywhere 1)
  (flx-ido-mode 1)
  ;; disable ido faces to see flx highlights.
  (setq ido-enable-flex-matching t)
  (setq ido-use-faces nil))

(use-package smex :ensure t)
(use-package ido-vertical-mode
  :ensure t
  :pin melpa-stable
  :config
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

(use-package projectile
  :ensure t
  :init   (setq projectile-use-git-grep t)
  :config
  (projectile-global-mode t)
  (setq projectile-completion-system 'ido)
  ;; Please find project files when I press C-p
  (let ((ctrl-p "\C-p"))
    (evil-global-set-key 'normal ctrl-p 'projectile-find-file)))

(use-package fzf
  :ensure t
  :pin    melpa)

(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :commands eldoc-mode
  :config
  (global-eldoc-mode))

(use-package company
  :demand
  :diminish company-mode
  :commands company-mode
  :init
  (setq
   company-dabbrev-ignore-case nil
   company-dabbrev-code-ignore-case nil
   company-dabbrev-downcase nil
   company-idle-delay 0
   company-minimum-prefix-length 4)
  :config
  ;; disables TAB in company-mode, freeing it for something else
  (define-key company-active-map [tab] nil)
  (define-key company-active-map (kbd "TAB") nil)
  (global-company-mode))


;; Avoid some files in dired
(use-package dired-x
  :config
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$|\\.fasl$")))

;; Set up the lisp stuff
(use-package slime
  :ensure t
  :pin melpa-stable
  :config
  (setq inferior-lisp-program (executable-find "sbcl"))
  (setq slime-contribs '(slime-fancy)))

;; Set up the haskell stuff
(use-package haskell-mode
  :ensure t
  :after key-seq
  :config
  (key-seq-define haskell-mode-map "ff" 'toggle-code-fold))

(use-package intero
  :ensure t
  :after evil
  :init
  (add-hook 'haskell-mode-hook 'whitespace-mode)
  :config
  (evil-define-key 'normal intero-mode-map "t" 'intero-type-at))

;; Set up the nix stuff
(use-package nix-mode
  :ensure t
  :pin melpa
  :mode (("\\.nix\\'" . nix-mode)))

;; Use dhall
(use-package dhall-mode
  :ensure t)

;; Use Elm
(use-package elm-mode
  :ensure t)

;; Use jq mode
(use-package jq-mode
  :ensure t)

;; Enable a nix buffer when in Dhall or Haskell
(use-package nix-buffer
  :ensure t
  :config
  (add-hook 'dhall-mode-hook
            (lambda ()
              (message "Starting up nix-buffer")
              (nix-buffer))))

;; Setup the Rust stuff
(use-package rust-mode
  :ensure t
  :config
  (setq rust-rustfmt-bin (executable-find "rustfmt"))
  (add-hook 'rust-mode-hook 'eglot-ensure)
  (add-hook 'rust-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'rust-format-buffer nil 'local))))

(use-package cargo
  :ensure t
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))

;; Set up the Ocaml stuff
(progn
  ;; Use `straight.el` to install `opam`
  ;; from a fork because it's better
  (straight-use-package
   '(opam :host github :repo "emacs-pe/opam.el"))
  (opam-init))

(use-package utop :ensure t)
(use-package merlin :ensure t)

(use-package tuareg
  :ensure t
  :config
  ;; Use Merlin
  (setq merlin-command 'opam)
  (add-to-list 'auto-mode-alist '("/\\.merlin\\'" . conf-mode))
  (when (functionp 'merlin-document)
    (define-key tuareg-mode-map (kbd "\C-c\C-h") 'merlin-document))
  ;; Run Merlin if a .merlin file in the parent dirs is detected
  (add-hook 'tuareg-mode-hook
            (lambda()
              (let ((fn (buffer-file-name)))
                (if (and fn (locate-dominating-file fn ".merlin"))
                    (merlin-mode)))))
  ;; Define some keys
  (evil-define-key 'normal tuareg-mode-map "t" 'merlin-type-enclosing)
  (evil-define-key 'visual tuareg-mode-map "t" 'merlin-type-enclosing)

  (define-key tuareg-mode-map (kbd "M-n") 'merlin-error-next)
  (define-key tuareg-mode-map (kbd "M-p") 'merlin-error-prev)
  (define-key tuareg-mode-map (kbd "M-.") 'merlin-locate)
  (define-key tuareg-mode-map (kbd "M-,") 'merlin-pop-stack)
  (define-key tuareg-mode-map (kbd "C-)") 'merlin-phrase-next)
  (define-key tuareg-mode-map (kbd "C-(") 'merlin-phrase-prev)
  ;; Enable some modes
  (mapc (curry 'add-hook 'tuareg-mode-hook)
        '(whitespace-mode merlin-mode company-mode)))


;; Set up the go stuff
(use-package go-mode
  :ensure t
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup)
  (add-hook 'go-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'gofmt-before-save nil 'local)))
  (evil-define-key 'normal go-mode-map (kbd "M-.") 'godef-jump))

(use-package go-eldoc
  :ensure t
  :after go-mode)

(use-package go-dlv
  :ensure t
  :after go-mode)

(use-package company-go
  :ensure t
  :after go-mode
  :config
  (add-hook 'go-mode-hook
            (lambda ()
              (company-mode)
              (set (make-local-variable 'company-backends) '(company-go)))))

;; Docker stuff
(use-package docker :ensure t)
(use-package docker-tramp :ensure t)
(use-package dockerfile-mode :ensure t)
(use-package docker-compose-mode :ensure t)

;; HCL mode
(use-package hcl-mode :ensure t)

;; Don't litter my directories with backup files
(setq backup-directory "~/.emacs.d/backup/")
(setq backup-by-copying t)
(setq backup-directory-alist
      `((".*" . ,backup-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,backup-directory t)))

;; Follow the source file to symlinks automatically always
(setq vc-follow-symlinks t)

;; I use emacs on terminal mode and copying sucks like a mfer
(defun copy-to-clipboard ()
  (interactive)
  (if (region-active-p)
      (lexical-let* ((xsel-cmd   "xsel -i -b")
                     (pbcopy-cmd "pbcopy"))
        (shell-command-on-region
         (region-beginning)
         (region-end)
         (if (osx-p) pbcopy-cmd xsel-cmd))
        (message "Region yanked to clipboard!")
        (deactivate-mark))
    (message "No region active. You can't yank to clipboard!")))

;; Fix M-., and enable the keychords
(use-package key-seq :ensure t)
(use-package key-chord
  :ensure t
  :after evil
  :after key-seq
  :config
  (key-chord-mode 1)
  (key-seq-define-global "jk" 'evil-normal-state)
  (key-seq-define-global "fd" 'save-buffer)
  (key-seq-define-global ",," 'smex)
  (key-seq-define-global ";b" 'projectile-switch-to-buffer)
  (key-seq-define-global ";a" 'projectile-switch-project)
  (key-seq-define-global "yc" 'copy-to-clipboard))

;; Fix some mode maps
(let ((meta-dot (kbd "M-.")))
  (define-key evil-normal-state-map meta-dot nil)
  (define-key ensime-mode-map       meta-dot 'ensime-edit-definition)
  (define-key scala-mode-map        meta-dot 'ensime-edit-definition)
  (define-key lisp-mode-map         meta-dot 'slime-edit-definition)
  (define-key intero-mode-map       meta-dot 'intero-goto-definition)
  (define-key emacs-lisp-mode-map   meta-dot 'xref-find-definitions))

;; Please delete trailing whitespaces
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Please listen to my mouse while in CLI
(let ((wheel-down (kbd "<mouse-4>"))
      (wheel-up   (kbd "<mouse-5>")))
  (xterm-mouse-mode)
  (global-set-key wheel-up   (curry-i 'scroll-up 1))
  (global-set-key wheel-down (curry-i 'scroll-down 1)))

(use-package fish-mode
  :ensure t)

;; Of course use org-mode
(use-package org
  :after key-seq
  :config
  (add-hook 'org-mode-hook 'flyspell-mode)
  (define-key org-mode-map (kbd "M-n") 'evil-next-flyspell-error)
  (define-key org-mode-map (kbd "M-p") 'evil-prev-flyspell-error)
  (key-seq-define org-mode-map "fl" 'org-open-at-point)
  (setq org-agenda-files '("~/Dropbox/Org")))

;; Try to get Jira stuff here
(use-package org-jira
  :ensure t
  :config
  (setq jiralib-url "https://jira.odp.cba"))

;; Try to get my calendar here
(use-package calfw-ical
  :ensure t
  :after calfw)

(use-package calfw-org
  :ensure t
  :after (key-seq calfw)
  :config
  (key-seq-define cfw:calendar-mode-map "vd" 'cfw:change-view-day)
  (key-seq-define cfw:calendar-mode-map "vw" 'cfw:change-view-week)
  (key-seq-define cfw:calendar-mode-map "vm" 'cfw:change-view-month)
  (key-seq-define cfw:calendar-mode-map "vt" 'cfw:navi-goto-today-command))

(use-package calfw
  :ensure t)

(use-package kubernetes
  :ensure t
  :pin melpa
  :commands (kubernetes-overview))

(use-package kubernetes-evil
  :ensure t
  :after kubernetes
  :pin melpa)

;; Enable Mustache syntax highlighting
(use-package mustache-mode
  :ensure t)

;; Allow me to control spotify
(use-package spotify :ensure t)

;; For use with mutt (I think)
(progn
  (add-to-list 'auto-mode-alist '(".*mutt.*" . message-mode))
  (setq mail-header-separator "")
  (add-hook 'message-mode-hook 'auto-fill-mode)
  (add-hook 'message-mode-hook 'whitespace-mode)
  (define-key message-mode-map (kbd "C-c C-c")
    '(lambda ()
       (interactive)
       (save-buffer)
       (server-edit))))

;; Show me git blames per line
(defun git-blame-line ()
  "Runs `git blame` on the current line and
   adds the commit id to the kill ring"
  (interactive)
  (let* ((line-number (save-excursion
                        (goto-char (point-at-bol))
                        (+ 1 (count-lines 1 (point)))))
         (line-arg (format "%d,%d" line-number line-number))
         (commit-buf (generate-new-buffer "*git-blame-line-commit*")))
    (call-process "git" nil commit-buf nil
                  "blame" (buffer-file-name) "-L" line-arg)
    (let* ((commit-id (with-current-buffer commit-buf
                        (buffer-substring 1 9)))
           (log-buf (generate-new-buffer "*git-blame-line-log*")))
      (kill-new commit-id)
      (call-process "git" nil log-buf nil
                    "log" "-1" "--pretty=%h [%ar] %an: %s" commit-id)
      (with-current-buffer log-buf
        (magit-show-commit commit-id))
      (kill-buffer log-buf))
    (kill-buffer commit-buf)))


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(column-number-mode t)
 '(custom-enabled-themes nil)
 '(custom-safe-themes
   (quote
    ("c74e83f8aa4c78a121b52146eadb792c9facc5b1f02c917e3dbb454fca931223" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "cd4d1a0656fee24dc062b997f54d6f9b7da8f6dc8053ac858f15820f9a04a679" "30289fa8d502f71a392f40a0941a83842152a68c54ad69e0638ef52f04777a4c" "c1de07961a3b5b49bfd50080e7811eea9c949526084df8d64ce1b4e0fdc076ff" "dbade2e946597b9cda3e61978b5fcc14fa3afa2d3c4391d477bdaeff8f5638c5" "801a567c87755fe65d0484cb2bded31a4c5bb24fd1fe0ed11e6c02254017acb2" "439d4ce8295685fc36fc119a062d0283bb05436ae841b053af76e9a5e42bc670" "a5956ec25b719bf325e847864e16578c61d8af3e8a3d95f60f9040d02497e408" "62c81ae32320ceff5228edceeaa6895c029cc8f43c8c98a023f91b5b339d633f" "7d2e7a9a7944fbde74be3e133fc607f59fdbbab798d13bd7a05e38d35ce0db8d" "c856158cc996d52e2f48190b02f6b6f26b7a9abd5fea0c6ffca6740a1003b333" "ef98b560dcbd6af86fbe7fd15d56454f3e6046a3a0abd25314cfaaefd3744a9e" "f27c3fcfb19bf38892bc6e72d0046af7a1ded81f54435f9d4d09b3bff9c52fc1" "0daf22a3438a9c0998c777a771f23435c12a1d8844969a28f75820dd71ff64e1" "8a6f10b3269c42c351776ee32c7ee755472dee4ecdf2177dcbf64d5e02d1ab64" "d411730c6ed8440b4a2b92948d997c4b71332acf9bb13b31e9445da16445fe43" "90ea0413ad77ae560f150de2e3888da4a2088590209705306156a307899a37ec" "4ee4a855548a7a966fe8722401441499b0d8b2fcf3d12438f81e016b6efed0e6" "ed2b5df51c3e1f99207074f8a80beeb61757ab18970e43d57dec34fe21af2433" "ce0788113995714fd96970417e8e71d5182d02bc40cc7ffef307f5e01e55942f" "11878ac0a75f25057b217f74d9098adbd893dc1374da94d81f715b70f4efa00b" "7666b079fc1493b74c1f0c5e6857f3cf0389696f2d9b8791c892c696ab4a9b64" "2af26301bded15f5f9111d3a161b6bfb3f4b93ec34ffa95e42815396da9cb560" "4486ade2acbf630e78658cd6235a5c6801090c2694469a2a2b4b0e12227a64b9" "42b9d85321f5a152a6aef0cc8173e701f572175d6711361955ecfb4943fe93af" "ed0b4fc082715fc1d6a547650752cd8ec76c400ef72eb159543db1770a27caa7" "021720af46e6e78e2be7875b2b5b05344f4e21fad70d17af7acfd6922386b61e" "3fa81193ab414a4d54cde427c2662337c2cab5dd4eb17ffff0d90bca97581eb6" "4154caa8409ff2eb6f74c913741420e7103b9ea26c3c7d1a5a16592d0d2f43e0" "c90fd1c669f260120d32ddd20168343f5c717ca69e95d2f805e42e88430c340e" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "b571f92c9bfaf4a28cb64ae4b4cdbda95241cd62cf07d942be44dc8f46c491f4" "65d9573b64ec94844f95e6055fe7a82451215f551c45275ca5b78653d505bc42" "dc9a8d70c4f94a28aafc7833f8d05667601968e6c9bf998791c39fcb3e4679c9" "3cd28471e80be3bd2657ca3f03fbb2884ab669662271794360866ab60b6cb6e6" "72a81c54c97b9e5efcc3ea214382615649ebb539cb4f2fe3a46cd12af72c7607" "9b59e147dbbde5e638ea1cde5ec0a358d5f269d27bd2b893a0947c4a867e14c1" "d5b121d69e48e0f2a84c8e4580f0ba230423391a78fcb4001ccb35d02494d79e" "ff7625ad8aa2615eae96d6b4469fcc7d3d20b2e1ebc63b761a349bebbb9d23cb" "a1a966cf2e87be6a148158c79863440ba2e45aa06cc214341feafe5c6deca4f2" "2b6bd2ebad907ee42b3ffefa4831f348e3652ea8245570cdda67f0034f07db93" "7f3ef7724515515443f961ef87fee655750512473b1f5bf890e2dc7e065f240c" "125fd2180e880802ae98b85f282b17f0aa8fa6cb9fc4f33d7fb19a38c40acef0" "5a970147df34752ed45bfdf0729233abfc085d9673ae7e40210c5e2d8f624b08" "f6a935e77513ba40014aa8467c35961fdb1fc936fa48407ed437083a7ad932de" default)))
 '(ensime-implicit-gutter-icons t)
 '(ensime-sem-high-faces
   (quote
    ((var . scala-font-lock:var-face)
     (varField . scala-font-lock:var-face)
     (valField :inherit font-lock-constant-face)
     (functionCall . font-lock-function-name-face)
     (operator . font-lock-keyword-face)
     (param)
     (class . font-lock-type-face)
     (trait :inherit font-lock-type-face)
     (object . font-lock-constant-face)
     (package . font-lock-preprocessor-face)
     (implicitConversion . ensime-implicit-highlight)
     (implicitParams . ensime-implicit-highlight)
     (deprecated :strike-through "dark gray"))))
 '(ensime-startup-notification nil)
 '(ensime-typecheck-idle-interval 5)
 '(ensime-typecheck-interval 5)
 '(evil-goggles-async-duration 0.1)
 '(font-use-system-font t)
 '(line-number-mode t)
 '(package-selected-packages
   (quote
    (utop opam go-dlv company-go go-eldoc mustache-mode github-modern-theme flycheck-rust racer cargo rust-mode kubernetes-evil kubernetes kubernetes-el wttrin nix-mode slack color-theme w3m alert ## calfw-org calfw-ical calfw spotify fish-mode go-mode symon multi-term mu4e mu4e-conversation m4ue-conversation magithub mpdel doom-themes notmuch flycheck-yamllint oceanic-theme org-jira tuareg merlin evil-goggles groovy-mode smex ido-vertical-mode flx-ido grizzl fzf yaml-mode jabber projectile ensime markdown-mode key-seq key-chord xclip flatland-black-theme flatland-theme git-gutter+ solarized-theme molokai-theme use-package paredit sublime-themes blackboard-theme dracula-theme darktooth-theme magit parinfer slime evil)))
 '(size-indication-mode t)
 '(xterm-mouse-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil))))
 '(cfw:face-holiday ((t (:background "controlDarkShadowColor" :foreground "White" :weight bold))))
 '(cfw:face-select ((t (:background "textColor"))))
 '(cfw:face-title ((t (:inherit variable-pitch :foreground "Green" :weight bold :height 1.5))))
 '(cfw:face-toolbar ((t nil)))
 '(cfw:face-toolbar-button-on ((t (:foreground "Gray50" :weight bold))))
 '(ensime-implicit-highlight ((t nil)))
 '(evil-goggles-change-face ((t (:inherit diff-removed))))
 '(evil-goggles-delete-face ((t (:inherit diff-removed))))
 '(evil-goggles-paste-face ((t (:inherit diff-added))))
 '(evil-goggles-undo-redo-add-face ((t (:inherit diff-added))))
 '(evil-goggles-undo-redo-change-face ((t (:inherit diff-changed))))
 '(evil-goggles-undo-redo-remove-face ((t (:inherit diff-removed))))
 '(evil-goggles-yank-face ((t (:inherit diff-changed))))
 '(linum ((t nil)))
 '(markdown-code-face ((t (:background "#2fae2fae2fae"))))
 '(underline ((t nil))))
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
